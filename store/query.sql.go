// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmail = `-- name: CreateEmail :one
INSERT INTO emails (website_id, email, date)
VALUES ($1, $2, $3)
RETURNING id, website_id, email, date
`

type CreateEmailParams struct {
	WebsiteID pgtype.Int8
	Email     string
	Date      pgtype.Timestamptz
}

// Create a new email entry for a website
func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) (Email, error) {
	row := q.db.QueryRow(ctx, createEmail, arg.WebsiteID, arg.Email, arg.Date)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.WebsiteID,
		&i.Email,
		&i.Date,
	)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO user_messages (name, email, message)
VALUES ($1, $2, $3)
RETURNING id, name, email, message
`

type CreateMessageParams struct {
	Name    string
	Email   string
	Message string
}

// Create a new message
func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (UserMessage, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.Name, arg.Email, arg.Message)
	var i UserMessage
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Message,
	)
	return i, err
}

const createSearchHistory = `-- name: CreateSearchHistory :one
INSERT INTO search_history (user_id, keyword)
VALUES ($1, $2)
RETURNING id, user_id, keyword, search_time
`

type CreateSearchHistoryParams struct {
	UserID  pgtype.Int8
	Keyword string
}

// Create a new search history entry
func (q *Queries) CreateSearchHistory(ctx context.Context, arg CreateSearchHistoryParams) (SearchHistory, error) {
	row := q.db.QueryRow(ctx, createSearchHistory, arg.UserID, arg.Keyword)
	var i SearchHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Keyword,
		&i.SearchTime,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password)
VALUES ($1, $2, $3)
RETURNING id, name, email, password
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

// Create a new user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const createWebsite = `-- name: CreateWebsite :one
INSERT INTO websites (search_history_id, url)
VALUES ($1, $2)
RETURNING id, search_history_id, url
`

type CreateWebsiteParams struct {
	SearchHistoryID pgtype.Int8
	Url             string
}

// Create a new website entry for a search
func (q *Queries) CreateWebsite(ctx context.Context, arg CreateWebsiteParams) (Website, error) {
	row := q.db.QueryRow(ctx, createWebsite, arg.SearchHistoryID, arg.Url)
	var i Website
	err := row.Scan(&i.ID, &i.SearchHistoryID, &i.Url)
	return i, err
}

const deleteEmail = `-- name: DeleteEmail :exec
DELETE FROM emails
WHERE id = $1
`

func (q *Queries) DeleteEmail(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEmail, id)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM user_messages
WHERE id = $1
`

// Delete a message by ID
func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMessage, id)
	return err
}

const deleteSearchHistory = `-- name: DeleteSearchHistory :exec
DELETE FROM search_history
WHERE id = $1
`

// Delete search history by ID
func (q *Queries) DeleteSearchHistory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSearchHistory, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

// Delete a user by ID
func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteWebsitesBySearchHistoryID = `-- name: DeleteWebsitesBySearchHistoryID :exec
DELETE FROM websites
WHERE search_history_id = $1
`

// Delete websites by search history ID
func (q *Queries) DeleteWebsitesBySearchHistoryID(ctx context.Context, searchHistoryID pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteWebsitesBySearchHistoryID, searchHistoryID)
	return err
}

const getEmailByID = `-- name: GetEmailByID :one
SELECT id, website_id, email, date
FROM emails
WHERE id = $1
`

func (q *Queries) GetEmailByID(ctx context.Context, id int64) (Email, error) {
	row := q.db.QueryRow(ctx, getEmailByID, id)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.WebsiteID,
		&i.Email,
		&i.Date,
	)
	return i, err
}

const getEmailsByWebsiteID = `-- name: GetEmailsByWebsiteID :many
SELECT id, website_id, email, date
FROM emails
WHERE website_id = $1
`

func (q *Queries) GetEmailsByWebsiteID(ctx context.Context, websiteID pgtype.Int8) ([]Email, error) {
	rows, err := q.db.Query(ctx, getEmailsByWebsiteID, websiteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Email
	for rows.Next() {
		var i Email
		if err := rows.Scan(
			&i.ID,
			&i.WebsiteID,
			&i.Email,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, name, email, message
FROM user_messages
WHERE id = $1
`

// Get a message by ID
func (q *Queries) GetMessageByID(ctx context.Context, id int64) (UserMessage, error) {
	row := q.db.QueryRow(ctx, getMessageByID, id)
	var i UserMessage
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Message,
	)
	return i, err
}

const getMessagesByEmail = `-- name: GetMessagesByEmail :many
SELECT id, name, email, message
FROM user_messages
WHERE email = $1
ORDER BY id
`

// Get messages by user email
func (q *Queries) GetMessagesByEmail(ctx context.Context, email string) ([]UserMessage, error) {
	rows, err := q.db.Query(ctx, getMessagesByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserMessage
	for rows.Next() {
		var i UserMessage
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Message,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSearchHistoryByKeyword = `-- name: GetSearchHistoryByKeyword :many
SELECT id, user_id, keyword, search_time
FROM search_history
WHERE user_id = $1 AND keyword = $2
ORDER BY search_time DESC
`

type GetSearchHistoryByKeywordParams struct {
	UserID  pgtype.Int8
	Keyword string
}

// Get search history by keyword
func (q *Queries) GetSearchHistoryByKeyword(ctx context.Context, arg GetSearchHistoryByKeywordParams) ([]SearchHistory, error) {
	rows, err := q.db.Query(ctx, getSearchHistoryByKeyword, arg.UserID, arg.Keyword)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchHistory
	for rows.Next() {
		var i SearchHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Keyword,
			&i.SearchTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSearchHistoryByUserID = `-- name: GetSearchHistoryByUserID :many
SELECT id, user_id, keyword, search_time
FROM search_history
WHERE user_id = $1
ORDER BY search_time DESC
`

// Get search history by user ID
func (q *Queries) GetSearchHistoryByUserID(ctx context.Context, userID pgtype.Int8) ([]SearchHistory, error) {
	rows, err := q.db.Query(ctx, getSearchHistoryByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchHistory
	for rows.Next() {
		var i SearchHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Keyword,
			&i.SearchTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password
FROM users
WHERE email = $1
`

// Get a user by email
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password
FROM users
WHERE id = $1
`

// Get a user by ID
func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getWebsitesBySearchHistoryID = `-- name: GetWebsitesBySearchHistoryID :many
SELECT id, search_history_id, url
FROM websites
WHERE search_history_id = $1
`

// Get websites by search history ID
func (q *Queries) GetWebsitesBySearchHistoryID(ctx context.Context, searchHistoryID pgtype.Int8) ([]Website, error) {
	rows, err := q.db.Query(ctx, getWebsitesBySearchHistoryID, searchHistoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Website
	for rows.Next() {
		var i Website
		if err := rows.Scan(&i.ID, &i.SearchHistoryID, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMessages = `-- name: ListMessages :many
SELECT id, name, email, message
FROM user_messages
ORDER BY id
`

// List all messages
func (q *Queries) ListMessages(ctx context.Context) ([]UserMessage, error) {
	rows, err := q.db.Query(ctx, listMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserMessage
	for rows.Next() {
		var i UserMessage
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Message,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSearchHistory = `-- name: ListSearchHistory :many
SELECT id, user_id, keyword, search_time
FROM search_history
ORDER BY search_time DESC
`

// List all search history entries
func (q *Queries) ListSearchHistory(ctx context.Context) ([]SearchHistory, error) {
	rows, err := q.db.Query(ctx, listSearchHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchHistory
	for rows.Next() {
		var i SearchHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Keyword,
			&i.SearchTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password
FROM users
ORDER BY id
`

// List all users
func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmail = `-- name: UpdateEmail :one
UPDATE emails
SET email = $2, date = $3
WHERE id = $1
RETURNING id, website_id, email, date
`

type UpdateEmailParams struct {
	ID    int64
	Email string
	Date  pgtype.Timestamptz
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (Email, error) {
	row := q.db.QueryRow(ctx, updateEmail, arg.ID, arg.Email, arg.Date)
	var i Email
	err := row.Scan(
		&i.ID,
		&i.WebsiteID,
		&i.Email,
		&i.Date,
	)
	return i, err
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE user_messages
SET name = $2, email = $3, message = $4
WHERE id = $1
RETURNING id, name, email, message
`

type UpdateMessageParams struct {
	ID      int64
	Name    string
	Email   string
	Message string
}

// Update a message by ID
func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (UserMessage, error) {
	row := q.db.QueryRow(ctx, updateMessage,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Message,
	)
	var i UserMessage
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Message,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2, email = $3, password = $4
WHERE id = $1
RETURNING id, name, email, password
`

type UpdateUserParams struct {
	ID       int64
	Name     string
	Email    string
	Password string
}

// Update a user's name, email, and password by ID
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}
